            °°°°°°°°   slide10Appunti: °°°°°°°°

Per quanto riguarda la slide 10 riprendiamo il concetto di Dominio di appartenenza ad un tipo di dato.

    Si parla di sequenze, una classe astratta che viene implementata da diversi tipi di dato come List,Tuple.
    Stringhe
    Dizionari collezioni non ord. di coppie chiave-valore e
    Set collezioni non ord. di elementi unici

° Il dominio è un insieme di valori che un tipo di dato può assumere.
° Il dominio di int è l'insieme di tutti i numeri interi.
° Il dominio di list è l'insieme di sequenze ordinate di oggetti.

°Una sequenza è un tipo di dato che rappresenta una collezione ordinata di elementi, accessibili tramite un indice.
    Gli elementi contenuti nella sequenza possono essere dello stesso tipo o di tipi diversi.
    Le sequenze ereditano una serie di metodi e proprietà comuni.

Dominio delle stringhe:
    Il dominio di str è l'insieme di tutti i valori che la sequenza può assumere.
    I valori che la stringa può assumere vegnono denominati caratteri e questi fanno parte del dominio Unicode.
    Questo dominio definisce appunto un set di caratteri, un insieme di valori che la stringa può assumere.
    Il set di riferimento di default che usa python è Unicode ma non è l'unico, conosciamo anche ASCII entrambi lavorano allo stesso modo associando un codice
    per Unicode e un intero in ASCII per rappresentare un singolo carattere la differenza è che Unicode rappresenta un insieme di valori molto più ampio rispetto
    ad ASCII comprendendo differenti alfabeti, simboli, emoji ecc, ASCII si limita all'alfabeto inglese numeri, simboli come ?!= e simboli di spaziatura, ritorno a capo ecc..



            °°°   L'obiettivo è capire come rappresentare dati strutturati in Python. °°°

Liste,Tuple,Set,Dizionari
    Un' dato strutturato è un tipo di dato che al suo interno può contenere n oggetti secondo una certa struttura che può essere
    ordinata o non ordinata oppure avere solo elementi unici o duplicati o anche far corrispondere ad una certa chiave un determinato valore.

    Il dato strutturato può contenere oggetti di tipi diverso e non essere legato al tipo del dato, ad esempio una lista può contenere numeri,
    stringhe, immagini altre liste e cosi via.

    I tipi di dati strutturati in python seguono un certa logica e ne sono di 3 tipi differenti
    i quali differiscono anche dalla loro sintassi per essere definiti:
        1. Liste []: Sono sequenze ordinate, nel senso che rispettano l'ordine d'inserimento e sono mutabili.
        2. Tuple(): Simili alle liste ma non possono essere modificate una volta che vengono definiti gli oggetti,
        quindi sono immutabili nel senso che non possiamo più modificarne il contenuto della collezione.

Proprietà:
    °°° Le liste come le tuple e le stringhe hanno una lunghezza nelle sequenze il primo elemento ha indice 0.
    °°° Per accedere ai dati strutturati usiamo un indice, questo processo viene chiamato indexing che non è altro che un intero che viene
    usato spesso in cicli come while e for per accedere al contenuto del dato in modo dinamico, quindi possiamo scansionare
    i singoli elementi e visualizzarne magari stampondoli o manipolandoli per fare qualcosa.
    °°° Un altro pocesso che possiamo fare sulle sequenze e estrarre una sottolista come una sottostringa da quella principale
    con l'operatore [ ] gli intervalli vengono separati da un : !Slicing!
    °°° Per accedere ad un singolo elemento usiamo questa sintassi "list[i]" dove la i è un contatore di tipo int
    °°° infine per quanto riguarda la mutabilità le liste sono mutabili mentre le tuple come le stringhe no

    Per aggiungere elementi alla lista in python usiamo la funzione append()

    °°° Possiamo accedere al massimo valore o al minimo valore della lista, tupla, stringa.

Concludendo le stringe, le liste e le tuple sono sequenze in cui è possibile utilizzare processi di indexing e slicing
    per accedere agli elementi oltre che a cicli.

Casi di slicing diversi applicabili alle sequenze:
s = "marco"
s[0:2] --> estrae la sottostringa dei primi due caratteri escludendo il 3°
s[2:] --> salterà i primi 2 caratteri della stringa e estrarrà dal 2 carattere in poi
slicing con passo viene definito due volte nelle [ ] quindi [::]
    s[::2] --> parte dal primo elmento e salta ogni 2 caratteri
    s[:-5] --> prende i primi 5 elementi
    s[-5:] --> parte dall'ultimo elemento e seleziona gli ultimi 5 elementi

***** scorrere una sequenza:
        for i in list[0::]
            print i

***** scorrere inversamente una sequenza:
    1. for i in range(len(s)-1,-1,-1)
        la i parte dalla lunghezza della stringa -1,
        stessa cosa possiamo farlo con il while e costruire il ciclo partendo dall'ultimo valore della stringa.

    2. for i in list[::-1] --> slicing

    3.(iterare su una lista e suoi singoli elementi che sono stringhe) for e while
        for i in range(0,len(l)):
            c = 0
            s = l[i]
            while c < len(s):
                print l[i][c]
                c +=1

    4. stesso risultato: for annidati
        for i in range(0,len(l)):
            s = l[i]
            for j in range(0,len(s)):
                print s[j]

    5. stesso risultato: usando lo slicing
        for i in range(0,len(l)):
          s = l[i]
          for j in s[0::]:
            print j

Metodi specifici per operare sulle sequenze mutabili come le liste mentre non adatti a sequenze immutabili,
Tutti i metodi elencati sono accessibili con la dot notation.
Sono tutti metodi della classe Sequence.

** reverse()    --> modifica invertendo l'ordine degli elementi nella lista.
** extend()     --> funziona un pò come append a differenza che aggiunge alla lista più di 1 elemento
                    se utilizzato in questo modo l.extend(["peppe","franco"])
                    altrimenti se usato in questo modo aggiunge singoli caratteri ("franco")
                    e senza la square brackets non funzionerà con elementi diversi da una sequenza.
                    extend inoltre aggiunge gli elementi alla lista accodandolo a tutti quelli già presenti.

** append()     --> per aggiungere qualsiasi cosa alla lista accodandola a tutti gli elementi già presenti.
** count()      --> conta il numero di occorrenze su una sequenza come una stringa:
                        esempio s = "peppe" s.count("e") --> se invocato in questo modo stampa 2

** remove()     --> rimuove qualsiasi elemento dalla lista
** insert(i, elemento) --> agginge nella posizione i l'elemento tutti gli altri scalano verso destra ovvero i+1
** pop()        --> rimuove l'ultimo elemento della lista
** pop(i)       --> rimuove l'elemento in posizione i

** sort()       --> mette in ordine alfabetico o numerico

° Recap di quanto detto: Processi e concetti che fanno parte delle sequenze:
    Indexing e Sliceing accedere tramite un indice agli elementi ed estrarre sottoliste o sottostrighe da una sequenza.
    Metodi che definisce la classe atratta sequence e accessibili con la dot notation sono:
append(e), insert(i,e), extend(char), pop(), remove(e), sort(), reverse(), count(char)

Esercizi proposti:
In seguito sono stati molto utili gli esercizi per implementare un algoritmo simile al metodo reverse, questa funzione prende in ingresso una
lista e restituisce la stessa lista con gli elementi disposti in maniera inversa.
Per farlo abbiamo bisogno di una lista temporanea e accedere prima agli elementi della lista mettendoli temporaneamente in una nuova lista
e poi la nuova lista iterata e assegnando a ciascun elemento della lista passata in ingresso il valore corrispondente nella nuova

def algReverse1(ln):
    newList = []
    for i in range(len(ln)-1,-1,-1):
      newList.append(ln[i])
    for i in range(0,len(newList)):
      ln[i] = newList[i]
    return ln

Ci è stato richiesto di sviluppare un algoritmo simile al count

Si vuole far notare i seguenti concetti:
    *** Il return passato in questo modo:
        return "lunghezza delle stringhe uguale", len(s1),len(s2) è una tupla puoi ovviamente customizzare questo return in una lista e
        quindi modificare eventualmente il return.

    *** Passare n argomenti come parametro di una funzione:
        *args, dove args è indicativo ciò che conta è *, usando * vengono raccolti in una tupla
        **kwargs, invece vengono raccolti in un dizionario dove c'è corrispondenza del nome passato come parametro e un rispettivo valore.

esempio:
def chekNString(*args):
    s = ""
    for i in args:
      if len(i) > len(s):
        s = i
    return s

#Dizionari:
    map = {'keys':'values'}

        Dizionari { }: <-- sinstassi
        Una collezione di coppie chiave-valore non ordinata o altrimenti un insieme di coppi chiavi-valore accessibili tramite chiave.
        Per ogni chiave, "keys" viene mappato un determinato valore.
        Le chiavi sono tipi di dato come stringhe o numeri e sono immutabili oltre che ad essere uniche,
        possono essere aggiunte nuove keys ma non modificabili.
        (Le chiavi devono essere univoche. Se si prova a creare una chiave duplicata, l'ultimo valore assegnato sovrascrive il precedente.)

         In generale l'accesso al dizionario avviene tramite chiave e non tramite indice.

         Accedere alle keys tramite il metodo keys()
            map.keys() --> restituisce la lista di tutte le chiavi


        Nel dizionario/mappa, mentre i values sono tipi di dato mutabili e possono essere di qualsiasi tipo.
        La posizione delle coppie non garantisce un ordine, i dizionari sono oggetti mutabili solo per quanto riguarda i values che possono
        essere modificati sul posto.
            map.values() --> restituisce la lista di tutti i valori


 I dizionari sono una collezzione di coppie chiave valore, in generale dati mutabili possiamo assegnare o modificare un elemento o
 aggiungerne uno nuovo:

    d = {'a'='1','b'='2' ... }
    Per l'aggiunta di un nuovo valore al dizionario['z'] = 26
    Per la modifica di un nuovo valore al dizionario['a'] = 10000


    Recap dei metodi disponibili usando la dot notation:
        !I seguenti metodi restituiscono Liste o una tupla nel caso 3.!
        1. keys()    --> restituisce una lista contente tutte le chiavi del dizionario
        2. values()  --> restituisce tutti i valori
        3. items()   --> return una liste di tuple dove le singole tuple rappresentano la coppia (chiave = valore)
        questa è una tupla per n item del dizionario

        Tipo di returrn di items
        [('key1', 'value1'), ('key2', 'value2'), ('key3', 'value3'), ('chiave3', 'franco')]
              1° tupla            2° tupla            3° tupla               4° tupla

def iterDiz1(d):
    for [k,v] in d.items():
      print k,v


Il metodo restituisce il valore della chiave:
    In generale il secondo parametro dei metodi get e pop può essere di qualsiasi tipo se non trova la chiave allora restituisce il secondo parametro.

Negli esempi d sta per dizionario e k per keys

    *get:
        d.get(k) --> restituisce il valore di quella chiave o altrimenti restituisce il dizionario se non trova la chiave
        d.get(k, d) --> se non trova la chiave restituisce tutte le coppie chiavi valore se passato il secondo parametro come un dizionario in questo caso o un valore di default

    Per accedere ai valori della mappa iterando sulle chiavi
        for i in d.keys():
            print d.get(i)

    pop:
        * pop(k) --> restituisce il valore della chiave ed elimina la coppia chiave-valore
        * pop(k, d) --> restituisce il valore della chiave ed elimina la coppia chiave valore altrimenti restituisce il dizionario in questo caso o un valore di default

update:
* update(otherDictionary) --> se le chiavi sono uguali i valori del dizionario 1 vengono sovrascritti dai valori di otherDict
    Chiaramente anche i dizionari hanno una lunghezza.

Esercizio:
Avendo in input una lista di dizionari di persone persons e una stringa city costruire
una funzione che elenchi il nome e l’email di tutte le persone presenti nella lista nati a city

rispetto al parametro d'ingresso dobbiamo accedere alla city e confrontarla con gli altri elementi:
esempio
NewList = []
dobbiamo iterare sulla lista principale quindi
for i in len(0,len(list)):
	i è un intero che incrementa ad ogni iterazione
	map1 = list[i] --> restituisce la prima mappa
	map2 = list[c] --> restituisce la seconda mappa se c=1
	c+=2
	if map1.get("city") == map2.get("city"):
		newList.append(map1)

4. Set ( ): un insieme di elementi unici, non ordinati.



